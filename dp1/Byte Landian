/*
Byte Landian
Send Feedback
Byteland has a very strange monetary system.
Each Bytelandian gold coin has an integer number written on it. A coin n can be exchanged in a bank into three coins: n/2, n/3 and n/4. But these numbers are all rounded down (the banks have to make a profit).
You can also sell Bytelandian coins for American dollars. The exchange rate is 1:1. But you can not buy Bytelandian coins.
You have one gold coin. What is the maximum amount of American dollars you can get for it?
 Input format :
The first and the only line of input contains a the integer value of 'n'. It is the number written on your coin.
Output format :
Print the the maximum amount of American dollars you can make.
Constraints :
0 <= n <= 10 ^ 9

Time Limit: 1 sec
Sample Input 1 :
12
Sample Output 1 :
13
Explanation of Sample Output 1 :
 You can change 12 into 6, 4 and 3, and then change these into $6 + $4 + $3 = $13.
Sample Input 2 :
2
Sample Output 1 :
2
*/



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.HashMap;
public class Solution {
    
	public static long bytelandian(long n, HashMap<Long, Long> memo) {
		        if (n<12){
            memo.put(n,n);
            return n;
        }
        if (!memo.containsKey(n)){
            long ans1=bytelandian(n/2,memo);
        	long ans2=bytelandian(n/3,memo);
        	long ans3=bytelandian(n/4,memo);
        	long currVal=ans1+ans2+ans3;
        	if (currVal>n)
            	memo.put(n,currVal);
        	else
            	memo.put(n,n);   
        }
        return memo.get(n);
	}
}

public class Runner {

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    public static void main(String[] args) throws NumberFormatException, IOException {
            long n = Long.parseLong(br.readLine().trim());
            HashMap<Long, Long> memo = new HashMap<Long, Long>();
            System.out.println(Solution.bytelandian(n,memo));
    }
}
